
    >>> from dlibs.common		import *
    >>> from common			import *
    >>> from ppfjob.search_saramin	import keyword_search, KeywordInfos
    >>> from ppfjob.processes		import Var, readPreviousInfos, init, keywords_search, KeywordsInfo
    >>> from dnews.model_tools		import NetTools
    >>> try:
    ...     from urllib.parse			import quote
    ... except:
    ...     from urllib				import quote

    >>> import pickle

    >>> init()
    >>> Var.prev_infos


* prepare

    >>> def encode_url(keyword):
    ...     url = 'http://www.saramin.co.kr/zf_user/search/jobs/page/1?pageCount=80&multiLine=&searchword=%s&company_cd=1&area=&domestic=&oversee=&jobCategory=&jobType=&career=&order=&periodType=&period=&condition=&arange=&company=&employ=&rSearchword=&hSearchword=&hInclude=&hExcept='
    ...     keyword = u(keyword).encode('euc-kr')
    ...     url = url % quote(keyword)
    ...     return url

    >>> def save_sample(path):
    ...     result = {}
    ...     keywords = [u('데이터'), 'python', 'datamining']
    ...     for keyword in keywords:
    ...         infos = keyword_search(keyword)
    ...         result[keyword] = infos
    ...     try:
    ...         fd = open(path, 'w')
    ...         pickle.dump(result, fd, 2)
    ...     except TypeError:
    ...         fd = open(path, 'bw')
    ...         pickle.dump(result, fd, 2)
    ...     fd.close()

    >>> keywords_search_sample_path = '__tmp/keywords_search_sample.pickle'

    >>> def read_sample(path):
    ...     if PY3:
    ...         fd = open(path, 'rb')
    ...     else:
    ...         fd = open(path, 'r')
    ...     return pickle.load(fd)
    ...         

    >>> #save_sample(keywords_search_sample_path)
    >>> keywords_search_info = read_sample(keywords_search_sample_path)


    
    >>> def save_sample(path, keyword):
    ...     pass

    >>> def side_effect(*args, **kwargs):
    ...     url_data = encode_url('데이터')
    ...     url_python = encode_url('python')
    ...     url_datamining = encode_url('datamining')
    ...     return url_data



* KeywordsInfos

    >>> infos1 = KeywordInfos()
    >>> ele_keys = ['a', 'b', 'c', 'd']
    >>> for icount = range(1, 3):
    ...     for count in range(1, 5):
    ...         ele = {}
    ...         for key in ele_keys:
    ...             value = key + str(count)
    ...             ele[key] = value
    ...     infos1.append(ele)
    




* keywords_search


    >>> keywords_search([u('데이터'), u('python'), u('datamining')])


